{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Digital Casting System (DCS) is a Innosuisse project as well as a new novel approach for robotic casting system. it serves part of Scaling up in Digital Casting of Concrete. This package works to transition automated digital casting systems from the laboratory to the industry scale by overcoming the challenges addressed by inline mixing. DCS involves identifying optimal values for comprehensive system parameters, including processing and material characteristics, while carefully considering specific system requirements.</p> <p>This package has three parts, which contain <code>PLC controller</code> for control components, <code>DCS library</code> for middleware, robotic control, and data handling; lastly, <code>DCS application</code> uses for real-time data recording and production simulation.</p>"},{"location":"#requirements","title":"Requirements","text":"<p>Operating System and Software.</p> <ul> <li>Windows 10 or Ubuntu 22.04</li> <li>TwinCAT 3 -- version 3.4</li> <li>Docker  -- version</li> </ul> <p>CAD/CAM software and simulation.</p> <ul> <li>ABB RobotStudio -- version 2023/2024</li> <li>Rhino and Grasshopper -- version 7</li> </ul>"},{"location":"#usage","title":"Usage","text":"<p>For further a tutorial, examples, and an API reference, please check out the online documentation HERE: digtial_casting doc</p> <p>Data visualization and real-time monitoring app Please find the app HERE.</p>"},{"location":"SUMMARY/","title":"Summary","text":"<ul> <li>Introduction</li> <li>Installation</li> <li>Contribute</li> <li>Examples</li> <li>API Reference<ul> <li>Architecture</li> <li>dcs<ul> <li>data<ul> <li>processing</li> <li>struct</li> </ul> </li> <li>hal<ul> <li>device</li> <li>interface</li> <li>plc</li> </ul> </li> <li>infrastructure<ul> <li>config_manager</li> </ul> </li> <li>robot<ul> <li>abb_config</li> <li>ros_client</li> </ul> </li> <li>utils<ul> <li>data_processing</li> </ul> </li> </ul> </li> </ul> </li> <li>About<ul> <li>Author</li> <li>License</li> </ul> </li> </ul>"},{"location":"author/","title":"Author","text":"<p>--8&lt;-- \"AUTHORS.md\"</p>"},{"location":"dev/","title":"Contribute","text":""},{"location":"dev/#development","title":"Development","text":""},{"location":"dev/#clone-the-repository","title":"Clone the repository","text":"<pre><code>git clone https://github.com/USI-FMAA/digital_casting_system.git\n# Alternately\ngit clone --recurse-submodules https://github.com/USI-FMAA/digital_casting_system.git\n</code></pre> <pre><code># if the repository is already cloned\ncd digital_casting_system\ngit submodule update --init --recursive\n</code></pre>"},{"location":"dev/#update-the-submodules","title":"Update the submodules","text":"<pre><code># Update the submoudles\ngit submodule update --remote --merge\ngit pull --recurse-submodules\n\n\n# Alternately\ngit submodule init\ncd external_controllers\ngit checkout master # checkout the lastest version\ngit pull\n\n# Alternately way\ngit submodule foreach git pull origin master\n</code></pre>"},{"location":"dev/#setup-the-environment","title":"Setup the environment","text":"<p>With <code>UV</code> package manger (super fast package management build by rust)</p>"},{"location":"dev/#install-uv","title":"Install UV","text":"<pre><code># On macOS and Linux.\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# On Windows.\npowershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n\nuv --version\n</code></pre>"},{"location":"dev/#create-virtual-environment","title":"Create virtual environment","text":"<p>UV <pre><code>uv venv --python 3.12\nsource .venv/bin/activate\nuv pip install -e .\nuv pip install -e '.[dev,doc]'\n\n# optional\nuv pip install '.[dev]' # install the development dependencies\nuv pip install '.[docs]' # install the documentation dependencies\n</code></pre></p> <p>Alternately with Anaconda package manager <pre><code># Create the environment and activate it\nconda create --prefix ./.env python=3.10\n\n# Install dependencies\nconda activate ./.env\npip install -r requirements.txt\n\n# Install Compas framework\npip install compas\npip install git+git://github.com/WeiTing1991/compas_rrc.git@main\n</code></pre></p>"},{"location":"license/","title":"License","text":"<pre><code>--8&lt;-- \"LICENSE\"\n</code></pre>"},{"location":"user/","title":"Installation","text":""},{"location":"user/#real-time-monitoring-and-data-recording","title":"Real-time monitoring and data recording","text":""},{"location":"user/#use-the-package-from-git","title":"Use the package from Git","text":"<pre><code># sync the library\nuv sync\n\n# run the main script (requires PLC hardware)\nuv run scripts/main.py\n</code></pre>"},{"location":"user/#plc-controller","title":"PLC Controller","text":"<p>Please find more information HERE under Connect with TwinCAT section.</p>"},{"location":"user/#robotic-control","title":"Robotic control","text":""},{"location":"user/#real-abb-robotic-control","title":"Real ABB robotic control","text":""},{"location":"user/#with-robot-support","title":"With robot support:","text":"<pre><code>pip install digital-casting-system[robot] git+https://github.com/WeiTing1991/compas_rrc.git@main\n</code></pre> <pre><code># clean the stopped container\ndocker container prune\n\n# compose up and connect with docker container\n# Linux/WSL\ndocker-compose -f ./external_controllers/robot/docker_compas_rrc/real_controller/docker-compose.yml up\n</code></pre> <pre><code># windows\ndocker-compose -f .\\external_controllers\\robot\\docker_compas_rrc\\real_controller\\docker-compose.yml up\n\nuv run scripts/main_run_robot.py\n</code></pre>"},{"location":"user/#simulation-with-abb-robotwith-virtual-controller","title":"Simulation with ABB robot(with virtual controller)","text":"<pre><code>docker\n# clean the stopped container\ndocker container prune\n# docker compose up\n\n# Linux/WSL\ndocker-compose -f ./external_controllers/robot/docker_compas_rrc/real_controller/docker-compose.yml up\n</code></pre> <pre><code># windows\ndocker-compose -f .\\external_controllers\\robot\\docker_compas_rrc\\virtual_controller\\docker-compose.yml up\n</code></pre>"},{"location":"user/#abb-robotstudios-setup","title":"ABB RobotStudios Setup","text":"<p>Please find more information here</p>"},{"location":"user/#cadcam-softwarerhino-and-grasshopper","title":"CAD/CAM software(Rhino and grasshopper)","text":"<p>Please find more information here</p>"},{"location":"user/#concrete-controller","title":"Concrete Controller","text":"<p>The sub-package <code>external_controllers</code> is a package that provides a set of driver to control the concrete casting machines. More information can be found in digital casting system controller</p>"},{"location":"api/api/","title":"Architecture","text":"<p>TODO: Add the architecture</p> <pre><code>---\nCLASS NAME\n---\n`Class Name`\n`Function Name`\nargs:\nreturn:\n</code></pre>"},{"location":"api/api/#api","title":"API","text":""},{"location":"api/api/#hal-hardware-abstraction-layer","title":"hal (hardware abstraction layer)","text":"<p>a hardware abstraction layer (HAL) is a layer of programming that allows a computer operating system to interact with a hardware device at a general or abstract level rather than at a detailed hardware level. </p> <p>In general, the HAL is the layer of a programming that is close to the physical hardware, but allows a device driver to be written for a specific hardware device. The HAL provides a consistent interface for hardware components, and provides a layer of protection between the operating system and the hardware.</p>"},{"location":"api/api/#plc","title":"PLC","text":""},{"location":"api/api/#device","title":"Device","text":""},{"location":"api/api/#interface","title":"Interface","text":""},{"location":"api/api/#abb_rob","title":"abb_rob","text":""},{"location":"api/api/#abbconfig","title":"AbbConfig","text":""},{"location":"api/api/#dcsrosclient","title":"DcsRosClient","text":""},{"location":"api/api/#data_processing","title":"data_processing","text":""},{"location":"api/api/#gui","title":"gui","text":""},{"location":"api/api/#utilities","title":"utilities","text":""},{"location":"api/package_desc/","title":"Digital Casting System Package","text":""},{"location":"api/package_desc/#package-usage","title":"Package Usage","text":"<p>NOTE: WIP</p> <p>Please find the detail of software architecture and API here</p>"},{"location":"api/package_desc/#package-descroption","title":"Package Descroption","text":""},{"location":"api/package_desc/#structure","title":"Structure","text":"<pre><code>src\n\u2514\u2500\u2500 dcs_dev\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py # main entrance file\n    \u251c\u2500\u2500 _config\n    \u251c\u2500\u2500 abb_rob\n    \u251c\u2500\u2500 data_processing\n    \u251c\u2500\u2500 gui\n    \u251c\u2500\u2500 hal\n    \u251c\u2500\u2500 utilities\n    \u251c\u2500\u2500 visualization\n    \u251c\u2500\u2500 test_main_gui.py # test \n    \u251c\u2500\u2500 test_main_plc.py # test \n    \u2514\u2500\u2500 test_main_rob.py # test \n</code></pre>"},{"location":"api/package_desc/#description","title":"Description","text":"<ul> <li> <p><code>data_processing</code>: The class is to passing the processing data into system to covert plc raw data into research data.</p> </li> <li> <p><code>_config</code>: The class is to provide the configuration file for robot(<code>abb_irb4600.json</code>) and plc(<code>beckhoff_controller.json</code>).</p> </li> <li> <p><code>abb_rob</code>: The class is to provide the abb robot functions to connect the robot via <code>compas_rrc</code>.</p> </li> <li> <p><code>gui</code>: The class is to create the GUI interface for user to interact with the system.</p> </li> <li> <p><code>hal</code>: The abstract layter class is to convert the config file into python object.</p> </li> <li><code>PLC</code>: The abstract class is to provide the functions to connect the PLC.</li> <li><code>Robot</code>: The abstract class is to handle to connect the robot.</li> <li> <p><code>device</code>: The abstract class object to represnet the interface of the devices. </p> </li> <li> <p><code>utilities</code>: The class is to provide the utility functions for the system.</p> </li> </ul> <p>NOTE: only support office data from json. - <code>Visualization</code>: The class is to provide the visualization functions for the system. </p>"},{"location":"api/package_desc/#features","title":"Features","text":"<ul> <li>More details about the package features</li> <li>Intergration with Robot package<ul> <li>define robot package</li> <li>app gui user interface MOVE to cpp lib</li> <li>for rhino user and gh user </li> </ul> </li> </ul>"},{"location":"api/reference/dcs/data/processing/","title":"dcs.data.processing","text":""},{"location":"api/reference/dcs/data/processing/#dcs.data.processing.DataGathering","title":"<code>DataGathering</code>","text":"<p>A class to handle data gathering from the PLC and export to files.</p> <p>This class provides functionality for collecting data during PLC operations and exporting it to JSON and CSV formats for analysis and storage.</p> <p>Attributes:</p> Name Type Description <code>_DATA</code> <code>str</code> <p>The absolute path of the data directory.</p> <code>_JSON_DIR</code> <code>str</code> <p>The absolute path of the json directory.</p> <code>_CSV_DIR</code> <code>str</code> <p>The absolute path of the csv directory.</p> <code>filename</code> <code>str</code> <p>Base filename for data export files.</p> Example <p>gatherer = DataGathering(\"experiment_01\") data = {\"timestamp\": \"2024-01-01\", \"value\": 42.5} gatherer.write_dict_to_json(data) gatherer.write_dict_to_csv([data], [\"timestamp\", \"value\"])</p>"},{"location":"api/reference/dcs/data/processing/#dcs.data.processing.DataGathering.__init__","title":"<code>__init__(filename)</code>","text":"<p>Initialize data gathering with specified filename.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>Base filename for exported data files.</p> required"},{"location":"api/reference/dcs/data/processing/#dcs.data.processing.DataGathering.write_dict_to_csv","title":"<code>write_dict_to_csv(data, header)</code>","text":"<p>Export list of dictionaries to CSV file.</p> <p>Writes the provided data list to a CSV file in the configured CSV directory with the specified filename and header.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>list</code> <p>List of dictionaries containing row data.</p> required <code>header</code> <code>list</code> <p>List of column headers for the CSV file.</p> required Example <p>gatherer = DataGathering(\"sensor_log\") data = [{\"time\": \"10:00\", \"temp\": 25.3}, {\"time\": \"10:01\", \"temp\": 25.5}] header = [\"time\", \"temp\"] gatherer.write_dict_to_csv(data, header)</p>"},{"location":"api/reference/dcs/data/processing/#dcs.data.processing.DataGathering.write_dict_to_json","title":"<code>write_dict_to_json(data)</code>","text":"<p>Export dictionary data to JSON file.</p> <p>Writes the provided dictionary to a JSON file in the configured JSON directory with the specified filename.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>Data dictionary to export to JSON.</p> required Example <p>gatherer = DataGathering(\"test_data\") data = {\"sensor_1\": 25.3, \"sensor_2\": 42.1} gatherer.write_dict_to_json(data)</p>"},{"location":"api/reference/dcs/data/processing/#dcs.data.processing.DataHandler","title":"<code>DataHandler</code>","text":"<p>Legacy DataHandler class - DEPRECATED.</p> <p>This class is maintained for backwards compatibility but should not be used in new code. Use ConfigManager from dcs.infrastructure.config_manager instead.</p> Example"},{"location":"api/reference/dcs/data/processing/#dcs.data.processing.DataHandler--old-deprecated","title":"OLD (deprecated):","text":"<p>from dcs.data.processing import DataHandler handler = DataHandler()</p>"},{"location":"api/reference/dcs/data/processing/#dcs.data.processing.DataHandler--new-recommended","title":"NEW (recommended):","text":"<p>from dcs.infrastructure.config_manager import ConfigManager config = ConfigManager() config.load_plc_config()</p>"},{"location":"api/reference/dcs/data/processing/#dcs.data.processing.DataHandler.__init__","title":"<code>__init__()</code>","text":"<p>Initialize legacy DataHandler.</p>"},{"location":"api/reference/dcs/data/processing/#dcs.data.processing.DataHandler.__str__","title":"<code>__str__()</code>","text":"<p>String representation of DataHandler.</p>"},{"location":"api/reference/dcs/data/processing/#dcs.data.processing.DataHandler.data_object_decoder","title":"<code>data_object_decoder(obj)</code>  <code>staticmethod</code>","text":"<p>Decode JSON object to DataParam.</p>"},{"location":"api/reference/dcs/data/struct/","title":"dcs.data.struct","text":""},{"location":"api/reference/dcs/data/struct/#dcs.data.struct.DataObject","title":"<code>DataObject</code>  <code>dataclass</code>","text":"<p>This moudle is the base data strcture to define the machine and its variables.</p> <p>var_id (str): variavle Id var_name (str)L variable name var_name_IN (str) variable name from plc, followed by plc naming is_write_value (bool): if the variable can be write to PLC is_read_value (bool): if the variable can be read form PLC data_type (str): data type in PLC, followed by C/C++ type active (bool): if the varible is active and can be read and/or write.</p>"},{"location":"api/reference/dcs/data/struct/#dcs.data.struct.DataParam","title":"<code>DataParam</code>  <code>dataclass</code>","text":"<p>This moudle is a data dictionary, which  wraps from DataObject with a machine id and params list.</p>"},{"location":"api/reference/dcs/data/struct/#dcs.data.struct.MachineDataStruct","title":"<code>MachineDataStruct</code>  <code>dataclass</code>","text":"<p>This moudle is data structure, representing the machine.</p>"},{"location":"api/reference/dcs/hal/device/","title":"dcs.hal.device","text":"<p>Device abstraction layer for digital casting system machines.</p> <p>This module defines the abstract Machine interface and concrete implementations for various digital casting system devices including inline mixers, concrete pumps, and dosing pumps. Each machine class provides standardized interfaces for accessing device parameters, input/output variables, and communication settings.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.ConcretePump","title":"<code>ConcretePump</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Machine</code></p> <p>Concrete pump machine implementation for material transport operations.</p> <p>The ConcretePump class represents a concrete pumping device that transports mixed concrete from the mixer to the casting location. This machine provides control of pumping parameters and monitoring of system status.</p> <p>Attributes:</p> Name Type Description <code>machine_id</code> <code>int</code> <p>Unique identifier for this pump instance.</p> <code>machine_input</code> <code>List[object]</code> <p>List of input parameter objects for pump control.</p> <code>machine_output</code> <code>List[object]</code> <p>List of output parameter objects for pump monitoring.</p> <code>machine_error_num</code> <code>int</code> <p>Current error count or error state indicator (default: 0).</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.ConcretePump.__str__","title":"<code>__str__()</code>","text":"<p>String representation of the concrete pump.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.ConcretePump.device_id","title":"<code>device_id()</code>","text":"<p>Get the unique device identifier for this pump.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.ConcretePump.get_input_var_name","title":"<code>get_input_var_name()</code>","text":"<p>Get an iterator of input variable names.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.ConcretePump.get_output_var_name","title":"<code>get_output_var_name()</code>","text":"<p>Get an iterator of output variable names.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.ConcretePump.input_list","title":"<code>input_list()</code>","text":"<p>Get the list of input parameters for pump control.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.ConcretePump.output_list","title":"<code>output_list()</code>","text":"<p>Get the list of output parameters for pump monitoring.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.ConcretePump.parameter_id","title":"<code>parameter_id(param_name)</code>","text":"<p>Get the parameter ID for a specific parameter name.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.ConcretePump.set_input_dict","title":"<code>set_input_dict()</code>","text":"<p>Generate input variable dictionary for PLC communication.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.ConcretePump.set_output_dict","title":"<code>set_output_dict()</code>","text":"<p>Generate output variable dictionary for PLC communication.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.Controller","title":"<code>Controller</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Machine</code></p> <p>System controller for coordinating multiple machine operations.</p> <p>The Controller class represents the main system controller that coordinates the operation of multiple machines in the digital casting system and manages global system parameters.</p> <p>Attributes:</p> Name Type Description <code>machine_id</code> <code>int</code> <p>Unique identifier for this controller instance.</p> <code>machine_input</code> <code>List[object]</code> <p>List of input parameter objects for system control.</p> <code>machine_output</code> <code>List[object]</code> <p>List of output parameter objects for system monitoring.</p> <code>machine_error_num</code> <code>int</code> <p>Current error count or error state indicator (default: 0).</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.Controller.__str__","title":"<code>__str__()</code>","text":"<p>String representation of the system controller.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.Controller.device_id","title":"<code>device_id()</code>","text":"<p>Get the unique device identifier for this controller.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.Controller.get_input_var_name","title":"<code>get_input_var_name()</code>","text":"<p>Get an iterator of input variable names.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.Controller.get_output_var_name","title":"<code>get_output_var_name()</code>","text":"<p>Get an iterator of output variable names.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.Controller.input_list","title":"<code>input_list()</code>","text":"<p>Get the list of input parameters for system control.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.Controller.output_list","title":"<code>output_list()</code>","text":"<p>Get the list of output parameters for system monitoring.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.Controller.parameter_id","title":"<code>parameter_id(param_name)</code>","text":"<p>Get the parameter ID for a specific parameter name.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.Controller.set_input_dict","title":"<code>set_input_dict()</code>","text":"<p>Generate input variable dictionary for PLC communication.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.Controller.set_output_dict","title":"<code>set_output_dict()</code>","text":"<p>Generate output variable dictionary for PLC communication.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.DosingPumpHigh","title":"<code>DosingPumpHigh</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Machine</code></p> <p>High-precision dosing pump for precise additive injection.</p> <p>The DosingPumpHigh class represents a high-precision dosing pump used for injecting additives, accelerators, or other chemicals into the concrete mix with high accuracy requirements.</p> <p>Attributes:</p> Name Type Description <code>machine_id</code> <code>int</code> <p>Unique identifier for this dosing pump instance.</p> <code>machine_input</code> <code>List[object]</code> <p>List of input parameter objects for dosing control.</p> <code>machine_output</code> <code>List[object]</code> <p>List of output parameter objects for dosing monitoring.</p> <code>machine_error_num</code> <code>int</code> <p>Current error count or error state indicator (default: 0).</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.DosingPumpHigh.__str__","title":"<code>__str__()</code>","text":"<p>String representation of the high-precision dosing pump.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.DosingPumpHigh.device_id","title":"<code>device_id()</code>","text":"<p>Get the unique device identifier for this dosing pump.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.DosingPumpHigh.get_input_var_name","title":"<code>get_input_var_name()</code>","text":"<p>Get an iterator of input variable names.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.DosingPumpHigh.get_output_var_name","title":"<code>get_output_var_name()</code>","text":"<p>Get an iterator of output variable names.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.DosingPumpHigh.input_list","title":"<code>input_list()</code>","text":"<p>Get the list of input parameters for dosing control.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.DosingPumpHigh.output_list","title":"<code>output_list()</code>","text":"<p>Get the list of output parameters for dosing monitoring.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.DosingPumpHigh.parameter_id","title":"<code>parameter_id(param_name)</code>","text":"<p>Get the parameter ID for a specific parameter name.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.DosingPumpHigh.set_input_dict","title":"<code>set_input_dict()</code>","text":"<p>Generate input variable dictionary for PLC communication.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.DosingPumpHigh.set_output_dict","title":"<code>set_output_dict()</code>","text":"<p>Generate output variable dictionary for PLC communication.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.DosingPumpLow","title":"<code>DosingPumpLow</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Machine</code></p> <p>Low-precision dosing pump for bulk additive injection.</p> <p>The DosingPumpLow class represents a dosing pump used for injecting larger volumes of additives or materials where high precision is not critical.</p> <p>Attributes:</p> Name Type Description <code>machine_id</code> <code>int</code> <p>Unique identifier for this dosing pump instance.</p> <code>machine_input</code> <code>List[object]</code> <p>List of input parameter objects for dosing control.</p> <code>machine_output</code> <code>List[object]</code> <p>List of output parameter objects for dosing monitoring.</p> <code>machine_error_num</code> <code>int</code> <p>Current error count or error state indicator (default: 0).</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.DosingPumpLow.__str__","title":"<code>__str__()</code>","text":"<p>String representation of the low-precision dosing pump.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.DosingPumpLow.device_id","title":"<code>device_id()</code>","text":"<p>Get the unique device identifier for this dosing pump.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.DosingPumpLow.get_input_var_name","title":"<code>get_input_var_name()</code>","text":"<p>Get an iterator of input variable names.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.DosingPumpLow.get_output_var_name","title":"<code>get_output_var_name()</code>","text":"<p>Get an iterator of output variable names.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.DosingPumpLow.input_list","title":"<code>input_list()</code>","text":"<p>Get the list of input parameters for dosing control.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.DosingPumpLow.output_list","title":"<code>output_list()</code>","text":"<p>Get the list of output parameters for dosing monitoring.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.DosingPumpLow.parameter_id","title":"<code>parameter_id(param_name)</code>","text":"<p>Get the parameter ID for a specific parameter name.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.DosingPumpLow.set_input_dict","title":"<code>set_input_dict()</code>","text":"<p>Generate input variable dictionary for PLC communication.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.DosingPumpLow.set_output_dict","title":"<code>set_output_dict()</code>","text":"<p>Generate output variable dictionary for PLC communication.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.InlineMixer","title":"<code>InlineMixer</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Machine</code></p> <p>Inline mixer machine implementation for concrete mixing operations.</p> <p>The InlineMixer class represents an inline concrete mixing device that blends cement, water, and additives in a continuous process. This machine provides real-time control of mixing parameters and monitoring of process variables.</p> <p>Attributes:</p> Name Type Description <code>machine_id</code> <code>int</code> <p>Unique identifier for this mixer instance.</p> <code>machine_input</code> <code>List[object]</code> <p>List of input parameter objects for mixer control.</p> <code>machine_output</code> <code>List[object]</code> <p>List of output parameter objects for mixer monitoring.</p> <code>machine_error_num</code> <code>int</code> <p>Current error count or error state indicator (default: 0).</p> Example <p>mixer_inputs = [param1, param2, param3]  # Parameter objects mixer_outputs = [status1, status2]  # Status objects mixer = InlineMixer(machine_id=1, machine_input=mixer_inputs, machine_output=mixer_outputs) print(f\"Mixer ID: {mixer.device_id()}\")</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.InlineMixer.__str__","title":"<code>__str__()</code>","text":"<p>String representation of the inline mixer.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Human-readable string describing the mixer configuration.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.InlineMixer.device_id","title":"<code>device_id()</code>","text":"<p>Get the unique device identifier for this mixer.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The machine_id assigned to this inline mixer instance.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.InlineMixer.get_input_var_name","title":"<code>get_input_var_name()</code>","text":"<p>Get an iterator of input variable names.</p> <p>Yields:</p> Name Type Description <code>Any</code> <code>Any</code> <p>Variable name for each input parameter of this mixer.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.InlineMixer.get_output_var_name","title":"<code>get_output_var_name()</code>","text":"<p>Get an iterator of output variable names.</p> <p>Yields:</p> Name Type Description <code>Any</code> <code>Any</code> <p>Variable name for each output parameter of this mixer.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.InlineMixer.input_list","title":"<code>input_list()</code>","text":"<p>Get the list of input parameters for mixer control.</p> <p>Returns:</p> Type Description <code>list[object]</code> <p>List[object]: List of input parameter objects that can be used to control mixer operation (flow rates, mixing speeds, etc.).</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.InlineMixer.output_list","title":"<code>output_list()</code>","text":"<p>Get the list of output parameters for mixer monitoring.</p> <p>Returns:</p> Type Description <code>list[object]</code> <p>List[object]: List of output parameter objects that provide mixer status and measurement data.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.InlineMixer.parameter_id","title":"<code>parameter_id(param_name)</code>","text":"<p>Get the parameter ID for a specific parameter name.</p> <p>Searches through both input and output parameter lists to find a parameter with the specified name and returns its ID.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>Name of the parameter to look up.</p> required <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>Parameter ID if found, 0 if parameter not found or has no ID.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.InlineMixer.set_input_dict","title":"<code>set_input_dict()</code>","text":"<p>Generate input variable dictionary for PLC communication.</p> <p>Creates dictionary entries for active input variables with their PLC variable names, data types, and configuration flags.</p> <p>Yields:</p> Name Type Description <code>dict</code> <code>dict</code> <p>Dictionary with variable name as key and list containing PLC variable name, pyads data type, and flag as value. Format: {var_name: [var_name_IN, \"pyads.DATA_TYPE\", 1]}</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.InlineMixer.set_output_dict","title":"<code>set_output_dict()</code>","text":"<p>Generate output variable dictionary for PLC communication.</p> <p>Creates dictionary entries for active output variables with their PLC variable names, data types, and configuration flags.</p> <p>Yields:</p> Name Type Description <code>dict</code> <code>dict</code> <p>Dictionary with variable name as key and list containing PLC variable name, pyads data type, and flag as value. Format: {var_name: [var_name_IN, \"pyads.DATA_TYPE\", 1]}</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.Machine","title":"<code>Machine</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base class for digital casting system machines.</p> <p>This abstract class defines the interface that all machine implementations must follow. It provides standard methods for accessing device information, parameter lists, and variable configurations needed for PLC communication.</p> <p>All concrete machine classes must implement the abstract methods to provide device-specific functionality while maintaining a consistent interface.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.Machine.device_id","title":"<code>device_id()</code>  <code>abstractmethod</code>","text":"<p>Get the unique device identifier for this machine.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>Unique identifier for the device, used for communication routing and device management within the digital casting system.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.Machine.get_input_var_name","title":"<code>get_input_var_name()</code>  <code>abstractmethod</code>","text":"<p>Get an iterator of input variable names.</p> <p>Yields:</p> Name Type Description <code>Any</code> <code>Any</code> <p>Variable names for all input parameters of this machine.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.Machine.get_output_var_name","title":"<code>get_output_var_name()</code>  <code>abstractmethod</code>","text":"<p>Get an iterator of output variable names.</p> <p>Yields:</p> Name Type Description <code>Any</code> <code>Any</code> <p>Variable names for all output parameters of this machine.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.Machine.input_list","title":"<code>input_list()</code>  <code>abstractmethod</code>","text":"<p>Get the list of input parameters for this machine.</p> <p>Returns:</p> Type Description <code>list[object]</code> <p>List[object]: List of input parameter objects that can be written to the machine for control and configuration purposes.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.Machine.output_list","title":"<code>output_list()</code>  <code>abstractmethod</code>","text":"<p>Get the list of output parameters for this machine.</p> <p>Returns:</p> Type Description <code>list[object]</code> <p>List[object]: List of output parameter objects that can be read from the machine for status monitoring and feedback.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.Machine.parameter_id","title":"<code>parameter_id(param_name)</code>  <code>abstractmethod</code>","text":"<p>Get the parameter ID for a specific parameter name.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>Name of the parameter to look up.</p> required <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>Unique identifier for the specified parameter, or 0 if not found.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.Machine.set_input_dict","title":"<code>set_input_dict()</code>  <code>abstractmethod</code>","text":"<p>Generate input variable dictionary for PLC communication.</p> <p>Yields:</p> Name Type Description <code>dict</code> <code>dict</code> <p>Dictionary entries containing variable name mappings and data type information for active input variables.</p>"},{"location":"api/reference/dcs/hal/device/#dcs.hal.device.Machine.set_output_dict","title":"<code>set_output_dict()</code>  <code>abstractmethod</code>","text":"<p>Generate output variable dictionary for PLC communication.</p> <p>Yields:</p> Name Type Description <code>dict</code> <code>dict</code> <p>Dictionary entries containing variable name mappings and data type information for active output variables.</p>"},{"location":"api/reference/dcs/hal/interface/","title":"dcs.hal.interface","text":"<p>Device parameter interface definitions for digital casting system.</p> <p>This module defines data structures and interfaces for managing device parameters and variable definitions used in PLC communication. It provides standardized data classes for parameter metadata, variable mapping, and machine configuration.</p>"},{"location":"api/reference/dcs/hal/interface/#dcs.hal.interface.DeviceStruct","title":"<code>DeviceStruct</code>  <code>dataclass</code>","text":"<p>Data structure for defining device parameter information from JSON configuration.</p> <p>This class represents a single parameter or variable definition used for communication between the control system and PLC. Each DeviceStruct contains metadata about the parameter including its identifier, variable names, data type, and activation status.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Unique identifier for the parameter within the device.</p> <code>var_name</code> <code>str</code> <p>Local variable name used in the control system.</p> <code>var_name_IN</code> <code>str</code> <p>PLC variable name used for actual communication.</p> <code>type</code> <code>str</code> <p>Data type of the parameter (BOOL, INT, REAL, STRING, etc.).</p> <code>active</code> <code>bool</code> <p>Whether this parameter is currently active/enabled.</p> Example <p>param = DeviceStruct(id=\"001\", var_name=\"mixer_speed\", var_name_IN=\"MAIN.rMixerRPM\", type=\"REAL\", active=True) param_dict = param._to_dict()</p>"},{"location":"api/reference/dcs/hal/interface/#dcs.hal.interface.MixerStructOutput","title":"<code>MixerStructOutput</code>  <code>dataclass</code>","text":"<p>Data structure for mixer output parameter definitions.</p> <p>This class serves as a placeholder for mixer-specific output parameter structures. It can be extended to include mixer-specific output variables such as current mixing speed, motor status, temperature readings, etc.</p> Note <p>This class is currently empty and serves as a placeholder for future mixer-specific output parameter implementations.</p> Example <p>mixer_output = MixerStructOutput()</p>"},{"location":"api/reference/dcs/hal/interface/#dcs.hal.interface.MixerStructOutput--future-implementation-might-include","title":"Future implementation might include:","text":""},{"location":"api/reference/dcs/hal/interface/#dcs.hal.interface.MixerStructOutput--mixer_outputcurrent_speed-1500-rpm","title":"&gt;&gt;&gt; mixer_output.current_speed = 1500  # RPM","text":""},{"location":"api/reference/dcs/hal/interface/#dcs.hal.interface.MixerStructOutput--mixer_outputmotor_temperature-655-celsius","title":"&gt;&gt;&gt; mixer_output.motor_temperature = 65.5  # Celsius","text":""},{"location":"api/reference/dcs/hal/interface/#dcs.hal.interface.MixerStructOutput.__post_init__","title":"<code>__post_init__()</code>","text":"<p>Placeholder for future implementation.</p>"},{"location":"api/reference/dcs/hal/plc/","title":"dcs.hal.plc","text":"<p>PLC hardware abstraction layer module.</p> <p>This module provides a hardware abstraction class for reading and writing variables from and to Beckhoff TwinCAT PLC controllers using the pyads library.</p>"},{"location":"api/reference/dcs/hal/plc/#dcs.hal.plc.AdsConnectionError","title":"<code>AdsConnectionError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when ADS connection to the PLC fails.</p> <p>This exception is raised when the PLC connection cannot be established or when communication errors occur during variable read/write operations.</p> <p>Attributes:</p> Name Type Description <code>message</code> <code>str</code> <p>Explanation of the connection error.</p>"},{"location":"api/reference/dcs/hal/plc/#dcs.hal.plc.LocalRepositoryEmptyError","title":"<code>LocalRepositoryEmptyError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when the local variable repository is empty.</p> <p>This exception is raised when attempting to perform operations that require configured variables, but no variables have been loaded into the PLC instance.</p> <p>Attributes:</p> Name Type Description <code>message</code> <code>str</code> <p>Explanation of the error.</p>"},{"location":"api/reference/dcs/hal/plc/#dcs.hal.plc.PLC","title":"<code>PLC</code>","text":"<p>Hardware abstraction class for reading and writing variables from and to PLC.</p> <p>This class provides thread-safe communication with Beckhoff TwinCAT PLC controllers using the ADS (Automation Device Specification) protocol. It manages connection state, variable lists, and provides methods for reading and writing PLC variables.</p> <p>Attributes:</p> Name Type Description <code>netid</code> <code>str</code> <p>Network ID of the PLC controller (format: \"x.x.x.x.x.x\")</p> <code>ip</code> <code>str</code> <p>IP address of the PLC controller</p> <code>plc_vars_input</code> <code>list</code> <p>List of input variables that can be written to the PLC</p> <code>plc_vars_output</code> <code>list</code> <p>List of output variables that can be read from the PLC</p> <code>connection</code> <code>Connection</code> <p>ADS connection object to the PLC</p> <code>lock_dict</code> <code>Lock</code> <p>Thread lock for dictionary operations</p> <code>lock_ads</code> <code>Lock</code> <p>Thread lock for ADS communication operations</p> Example <p>plc = PLC(netid=\"192.168.1.100.1.1\", ip=\"192.168.1.100\") if plc.connect(): ...   value = plc.get_variable(\"MAIN.bStartButton\") ...   plc.set_variable(\"MAIN.bLED\", True) ...   plc.close()</p>"},{"location":"api/reference/dcs/hal/plc/#dcs.hal.plc.PLC.connection","title":"<code>connection = field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>ADS connection object to the PLC.</p>"},{"location":"api/reference/dcs/hal/plc/#dcs.hal.plc.PLC.ip","title":"<code>ip</code>  <code>instance-attribute</code>","text":"<p>IP address of the PLC controller.</p>"},{"location":"api/reference/dcs/hal/plc/#dcs.hal.plc.PLC.lock_ads","title":"<code>lock_ads = field(factory=Lock)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Thread lock for protecting ADS communication operations.</p>"},{"location":"api/reference/dcs/hal/plc/#dcs.hal.plc.PLC.lock_dict","title":"<code>lock_dict = field(factory=Lock)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Thread lock for protecting dictionary operations.</p>"},{"location":"api/reference/dcs/hal/plc/#dcs.hal.plc.PLC.netid","title":"<code>netid = field(validator=(validators.instance_of(str)))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Network ID of the PLC controller in ADS format.</p>"},{"location":"api/reference/dcs/hal/plc/#dcs.hal.plc.PLC.plc_vars_input","title":"<code>plc_vars_input = field(factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>List of input variables that can be written to the PLC.</p>"},{"location":"api/reference/dcs/hal/plc/#dcs.hal.plc.PLC.plc_vars_output","title":"<code>plc_vars_output = field(factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>List of output variables that can be read from the PLC.</p>"},{"location":"api/reference/dcs/hal/plc/#dcs.hal.plc.PLC.__attrs_post_init__","title":"<code>__attrs_post_init__()</code>","text":"<p>Initialize the ADS connection object after instance creation.</p> <p>This method is automatically called after the instance is created and sets up the pyads connection with the specified netid and PLC port.</p>"},{"location":"api/reference/dcs/hal/plc/#dcs.hal.plc.PLC.check_variables_active","title":"<code>check_variables_active()</code>","text":"<p>Check which variables are currently active and available.</p> <p>This method verifies the availability and status of all configured variables in the PLC. It can be used to validate configuration and ensure that all required variables are accessible.</p> <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>This method is not yet implemented.</p> Note <p>This method is currently a placeholder and raises NotImplementedError. Full implementation would check variable accessibility and status.</p>"},{"location":"api/reference/dcs/hal/plc/#dcs.hal.plc.PLC.close","title":"<code>close()</code>","text":"<p>Close the connection to the PLC.</p> <p>This method closes the active ADS connection to the PLC if it's currently open. It's important to call this method to properly release network resources when communication with the PLC is no longer needed.</p> Note <p>This method will print a confirmation message when the connection is closed.</p>"},{"location":"api/reference/dcs/hal/plc/#dcs.hal.plc.PLC.connect","title":"<code>connect()</code>","text":"<p>Establish connection to the PLC.</p> <p>This method attempts to open an ADS connection to the PLC and verifies the connection by reading device information. The connection attempt is thread-safe using the ADS lock.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if connection was successful, False otherwise.</p> Note <p>Connection status and any errors are printed to the console. Multiple calls to this method are safe - it will only open the connection if it's not already open.</p> Example <p>plc = PLC(netid=\"192.168.1.100.1.1\", ip=\"192.168.1.100\") if plc.connect(): ...   print(\"Successfully connected to PLC\") ... else: ...   print(\"Failed to connect to PLC\")</p>"},{"location":"api/reference/dcs/hal/plc/#dcs.hal.plc.PLC.get_variable","title":"<code>get_variable(variable_name)</code>","text":"<p>Read a specific variable value from the PLC.</p> <p>This method reads the current value of a single variable from the PLC. The variable must be present in either the input or output variable lists and must be marked as active.</p> <p>Parameters:</p> Name Type Description Default <code>variable_name</code> <code>str</code> <p>Name of the variable to read from the PLC. Must match the var_name_IN field of a configured variable.</p> required <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>The current value of the variable as read from the PLC. The type depends on the variable's data type (BOOL, INT, REAL, etc.).</p> <p>Raises:</p> Type Description <code>VariableNotFoundInRepositoryError</code> <p>If the variable is not found in the configured variable lists or is marked as inactive.</p> Note <p>This method is thread-safe and searches through both input and output variable lists. The variable must be marked as active (active != \"false\").</p> Example <p>plc = PLC(netid=\"192.168.1.100.1.1\", ip=\"192.168.1.100\") plc.connect() temperature = plc.get_variable(\"MAIN.rCurrentTemperature\") print(f\"Current temperature: {temperature}\u00b0C\")</p>"},{"location":"api/reference/dcs/hal/plc/#dcs.hal.plc.PLC.read_variables","title":"<code>read_variables()</code>","text":"<p>Read all configured variables from the PLC and store them internally.</p> <p>This method reads all variables from the configured output variable list and stores their values for later retrieval. The operation is thread-safe and requires an active PLC connection.</p> <p>Raises:</p> Type Description <code>AdsConnectionError</code> <p>If the PLC connection cannot be established.</p> <code>NotImplementedError</code> <p>This method is not yet fully implemented.</p> Note <p>This method is currently a placeholder and raises NotImplementedError. Full implementation would batch-read all configured variables for improved performance.</p> Example <p>plc.connect() plc.read_variables()  # Reads all configured variables</p>"},{"location":"api/reference/dcs/hal/plc/#dcs.hal.plc.PLC.set_plc_vars_input_list","title":"<code>set_plc_vars_input_list(plc_vars_input)</code>","text":"<p>Load input variables list from the PLC configuration.</p> <p>This method sets or extends the list of input variables that can be written to the PLC. Input variables are typically setpoints, commands, or configuration parameters sent from the control system to the PLC.</p> <p>Parameters:</p> Name Type Description Default <code>plc_vars_input</code> <code>List[Any]</code> <p>List of input variable objects containing variable definitions, names, data types, and other metadata.</p> required Note <p>If the input list is empty, it will be replaced with the new list. If the input list already contains variables, the new variables will be appended to the existing list.</p> Example <p>vars = [{\"name\": \"MAIN.rSetTemp\", \"type\": \"REAL\"}, {\"name\": \"MAIN.bStart\", \"type\": \"BOOL\"}] plc.set_plc_vars_input_list(vars)</p>"},{"location":"api/reference/dcs/hal/plc/#dcs.hal.plc.PLC.set_plc_vars_output_list","title":"<code>set_plc_vars_output_list(plc_vars_output)</code>","text":"<p>Load output variables list from the PLC configuration.</p> <p>This method sets or extends the list of output variables that can be read from the PLC. Output variables are typically sensor values, status information, or feedback data sent from the PLC to the control system.</p> <p>Parameters:</p> Name Type Description Default <code>plc_vars_output</code> <code>List[Any]</code> <p>List of output variable objects containing variable definitions, names, data types, and other metadata.</p> required Note <p>If the output list is empty, it will be replaced with the new list. If the output list already contains variables, the new variables will be appended to the existing list.</p> Example <p>vars = [{\"name\": \"MAIN.rCurrTemp\", \"type\": \"REAL\"}, {\"name\": \"MAIN.bRunning\", \"type\": \"BOOL\"}] plc.set_plc_vars_output_list(vars)</p>"},{"location":"api/reference/dcs/hal/plc/#dcs.hal.plc.PLC.set_variable","title":"<code>set_variable(variable_name, value)</code>","text":"<p>Write a specific variable value to the PLC.</p> <p>This method writes a value to a single variable in the PLC. The variable must be present in the input variable list and must be marked as active.</p> <p>Parameters:</p> Name Type Description Default <code>variable_name</code> <code>str</code> <p>Name of the variable to write to the PLC. Must match the var_name field of a configured input variable.</p> required <code>value</code> <code>Any</code> <p>The value to write to the variable. The type should match the variable's data type (BOOL, INT, REAL, etc.).</p> required <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>The result of the write operation (typically None for successful writes).</p> <p>Raises:</p> Type Description <code>VariableNotFoundInRepositoryError</code> <p>If the variable is not found in the configured input variable list or is marked as inactive.</p> Note <p>This method is thread-safe and only searches through input variable lists since output variables are read-only from the control system perspective. The variable must be marked as active (active != \"false\").</p> Example <p>plc = PLC(netid=\"192.168.1.100.1.1\", ip=\"192.168.1.100\") plc.connect() plc.set_variable(\"MAIN.bStartProcess\", True) plc.set_variable(\"MAIN.rSetTemperature\", 25.5)</p>"},{"location":"api/reference/dcs/hal/plc/#dcs.hal.plc.PLC.write_variables","title":"<code>write_variables()</code>","text":"<p>Write all modified variables to the PLC.</p> <p>This method writes all variables that have been modified or queued for writing to the PLC. The operation is thread-safe and requires an active PLC connection.</p> <p>Raises:</p> Type Description <code>AdsConnectionError</code> <p>If the PLC connection cannot be established.</p> <code>NotImplementedError</code> <p>This method is not yet fully implemented.</p> Note <p>This method is currently a placeholder and raises NotImplementedError. Full implementation would batch-write all modified variables for improved performance.</p> Example <p>plc.connect() plc.write_variables()  # Writes all modified variables</p>"},{"location":"api/reference/dcs/hal/plc/#dcs.hal.plc.VariableNotFoundInRepositoryError","title":"<code>VariableNotFoundInRepositoryError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when a requested variable is not found in the repository.</p> <p>This exception is raised when attempting to read or write a variable that is not present in the configured variable lists, or when the variable is marked as inactive.</p> <p>Attributes:</p> Name Type Description <code>message</code> <code>str</code> <p>Explanation of the error including variable name and ID.</p>"},{"location":"api/reference/dcs/infrastructure/config_manager/","title":"dcs.infrastructure.config_manager","text":"<p>Configuration manager for project and machine settings.</p> <p>This module provides centralized configuration management for the digital casting system, handling robot configurations, PLC settings, and other system parameters loaded from JSON configuration files with structured data objects.</p>"},{"location":"api/reference/dcs/infrastructure/config_manager/#dcs.infrastructure.config_manager.ConfigManager","title":"<code>ConfigManager</code>","text":"<p>Manages configuration for project and machine settings.</p> <p>The ConfigManager provides a centralized interface for loading and accessing configuration data for various components of the digital casting system, including robot controllers, PLC settings, and machine parameters.</p> <p>Configuration files are loaded and converted to structured data objects, with all machine parameters kept in memory for efficient access by HAL classes.</p> <p>Attributes:</p> Name Type Description <code>_HERE</code> <code>str</code> <p>Directory path of this module file.</p> <code>_HOME</code> <code>str</code> <p>Root directory path of the project.</p> <code>_config_dir</code> <code>str</code> <p>Directory path where configuration files are stored.</p> <code>machines</code> <code>Dict[str, DataParam]</code> <p>In-memory storage of machine configurations.</p> Example <p>config = ConfigManager() config.load_plc_config() inline_mixer = config.get_machine(\"inline_mixer\") print(f\"Machine ID: {inline_mixer.machine_id}\")</p>"},{"location":"api/reference/dcs/infrastructure/config_manager/#dcs.infrastructure.config_manager.ConfigManager.__init__","title":"<code>__init__()</code>","text":"<p>Initialize configuration manager with default paths.</p> <p>Sets up the directory paths used for locating configuration files relative to the current module location and initializes machine storage.</p>"},{"location":"api/reference/dcs/infrastructure/config_manager/#dcs.infrastructure.config_manager.ConfigManager.get_all_machines","title":"<code>get_all_machines()</code>","text":"<p>Get all loaded machine configurations.</p> <p>Returns a dictionary of all machine configurations that were loaded using load_plc_config().</p> <p>Returns:</p> Type Description <code>dict[str, DataParam]</code> <p>Dict[str, DataParam]: Dictionary mapping machine names to their configurations.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If load_plc_config() has not been called first.</p> Example <p>config = ConfigManager() config.load_plc_config() all_machines = config.get_all_machines() for name, machine in all_machines.items(): ...   print(f\"Machine: {name}, ID: {machine.machine_id}\")</p>"},{"location":"api/reference/dcs/infrastructure/config_manager/#dcs.infrastructure.config_manager.ConfigManager.get_machine","title":"<code>get_machine(machine_name)</code>","text":"<p>Get a specific machine configuration as structured data.</p> <p>Retrieves a machine configuration that was previously loaded using load_plc_config(). The machine data includes structured input and output variable definitions.</p> <p>Parameters:</p> Name Type Description Default <code>machine_name</code> <code>str</code> <p>Name of the machine to retrieve.</p> required <p>Returns:</p> Name Type Description <code>DataParam</code> <code>DataParam</code> <p>Structured machine configuration with input/output variables.</p> <p>Raises:</p> Type Description <code>KeyError</code> <p>If the machine name is not found in loaded configurations.</p> <code>RuntimeError</code> <p>If load_plc_config() has not been called first.</p> Example <p>config = ConfigManager() config.load_plc_config() inline_mixer = config.get_machine(\"inline_mixer\") print(f\"Machine ID: {inline_mixer.machine_id}\") for output_var in inline_mixer.machine_output: ...   print(f\"Output: {output_var.var_name}\")</p>"},{"location":"api/reference/dcs/infrastructure/config_manager/#dcs.infrastructure.config_manager.ConfigManager.get_plc_config","title":"<code>get_plc_config(filepath=None)</code>","text":"<p>Get PLC configuration from JSON file as raw dictionary.</p> <p>Loads and returns the Beckhoff TwinCAT PLC configuration as a dictionary. For structured data access, use load_plc_config() followed by get_machine().</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>Custom path to PLC config file.</p> <code>None</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Dict[str, Any]: Dictionary containing PLC configuration data including ADS settings, network parameters, variable lists, and machine definitions.</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the PLC configuration file is not found.</p> <code>ValueError</code> <p>If the configuration file contains invalid JSON.</p> Example <p>config = ConfigManager() plc_config = config.get_plc_config() netid = plc_config.get(\"network\", {}).get(\"netid\") machines = plc_config.get(\"machines\", [])</p>"},{"location":"api/reference/dcs/infrastructure/config_manager/#dcs.infrastructure.config_manager.ConfigManager.get_robot_config","title":"<code>get_robot_config(filepath=None)</code>","text":"<p>Get robot configuration from JSON file.</p> <p>Loads and returns the ABB IRB4600 robot configuration including communication settings, coordinate systems, tool definitions, and operational parameters.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>Custom path to robot config file.</p> <code>None</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Dict[str, Any]: Dictionary containing robot configuration data including network settings, coordinate frames, joint limits, and other robot-specific parameters.</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the robot configuration file is not found.</p> <code>ValueError</code> <p>If the configuration file contains invalid JSON.</p> Example <p>config = ConfigManager() robot_config = config.get_robot_config() ip_address = robot_config.get(\"network\", {}).get(\"ip\") joint_limits = robot_config.get(\"joint_limits\", [])</p>"},{"location":"api/reference/dcs/infrastructure/config_manager/#dcs.infrastructure.config_manager.ConfigManager.load_plc_config","title":"<code>load_plc_config(filepath=None)</code>","text":"<p>Load PLC configuration and convert to structured data objects.</p> <p>Loads the PLC configuration file and converts all machine definitions to DataParam objects, storing them in memory for efficient access. This method should be called before using get_machine().</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>Custom path to PLC config file.</p> <code>None</code> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the PLC configuration file is not found.</p> <code>ValueError</code> <p>If the configuration file contains invalid JSON.</p> Example <p>config = ConfigManager() config.load_plc_config() inline_mixer = config.get_machine(\"inline_mixer\")</p>"},{"location":"api/reference/dcs/robot/abb_config/","title":"dcs.robot.abb_config","text":"<p>A class to load the configuration parameters via given path json.</p>"},{"location":"api/reference/dcs/robot/abb_config/#dcs.robot.abb_config.AbbConfig","title":"<code>AbbConfig</code>","text":"<p>AbbConfig is a class designed to load configuration parameters from a JSON file.</p> <p>This class loads configuration parameters from a JSON file located in the project's config directory. It provides timeout settings for robot controller communication.</p> <p>Attributes:</p> Name Type Description <code>TIMEOUT</code> <code>int</code> <p>Timeout in seconds to avoid freezing the main thread if the controller is unavailable.</p> <code>TIMEOUT_LONG</code> <code>int</code> <p>Extended timeout in seconds for time-consuming processes such as slow motions.</p>"},{"location":"api/reference/dcs/robot/abb_config/#dcs.robot.abb_config.AbbConfig.__init__","title":"<code>__init__()</code>","text":"<p>Initialize the ABB configuration by loading parameters from a JSON file.</p> <p>Sets the following attributes based on the configuration file: - TIMEOUT: Standard timeout for robot communication - TIMEOUT_LONG: Extended timeout for slow operations</p> <p>Raises:</p> Type Description <code>KeyError</code> <p>If required configuration keys are missing in the JSON file.</p> <code>ValueError</code> <p>If the configuration values cannot be converted to integers.</p> <code>FileNotFoundError</code> <p>If the configuration file cannot be found.</p> <code>JSONDecodeError</code> <p>If the JSON file is malformed.</p>"},{"location":"api/reference/dcs/robot/ros_client/","title":"dcs.robot.ros_client","text":"<p>This module is a ROS client for ABB robot controller via compas_rrc.</p>"},{"location":"api/reference/dcs/robot/ros_client/#dcs.robot.ros_client.DcsRosClient","title":"<code>DcsRosClient</code>","text":"<p>A ROS client for ABB robot controller via compas_rrc.</p> <p>This class provides an interface to connect, control, and communicate with an ABB robot controller using the compas_rrc library over ROS. It supports initialization and termination of the ROS client, digital/group/analog IO operations, and various robot movement commands.</p> <p>Attributes:</p> Name Type Description <code>_ros</code> <p>Internal ROS client instance.</p> <code>_abb</code> <p>Internal ABB client instance.</p>"},{"location":"api/reference/dcs/robot/ros_client/#dcs.robot.ros_client.DcsRosClient.__init__","title":"<code>__init__()</code>","text":"<p>Initialize the ROS client.</p> <p>Creates a new DcsRosClient instance with uninitialized ROS and ABB client connections.</p>"},{"location":"api/reference/dcs/robot/ros_client/#dcs.robot.ros_client.DcsRosClient.close_ros_client","title":"<code>close_ros_client()</code>","text":"<p>Close the ROS client and terminate the connection.</p> <p>Properly closes the ROS client connection and terminates the ROS communication. Sends a disconnection message before closing.</p>"},{"location":"api/reference/dcs/robot/ros_client/#dcs.robot.ros_client.DcsRosClient.get_analog_input","title":"<code>get_analog_input(io_name)</code>","text":"<p>Retrieve and display the value of an analog input from the robot controller.</p> <p>Parameters:</p> Name Type Description Default <code>io_name</code> <code>str</code> <p>The name/identifier of the analog input to read.</p> required Side Effects <p>Prints the current value of the specified analog input to the console.</p>"},{"location":"api/reference/dcs/robot/ros_client/#dcs.robot.ros_client.DcsRosClient.get_analog_output","title":"<code>get_analog_output(io_name, value)</code>","text":"<p>Set the value of an analog output on the robot controller.</p> <p>Note: Method name suggests 'get' but actually sets the analog output value.</p> <p>Parameters:</p> Name Type Description Default <code>io_name</code> <code>str</code> <p>The name/identifier of the analog output signal.</p> required <code>value</code> <code>int</code> <p>The analog value to set.</p> required"},{"location":"api/reference/dcs/robot/ros_client/#dcs.robot.ros_client.DcsRosClient.get_digital_input","title":"<code>get_digital_input(io_name)</code>","text":"<p>Retrieve and display the value of a digital input from the robot controller.</p> <p>Parameters:</p> Name Type Description Default <code>io_name</code> <code>str</code> <p>The name/identifier of the digital input signal to read.</p> required Side Effects <p>Prints the current value of the specified digital input to the console.</p>"},{"location":"api/reference/dcs/robot/ros_client/#dcs.robot.ros_client.DcsRosClient.get_group_input","title":"<code>get_group_input(io_name)</code>","text":"<p>Retrieve and display the value of a group input from the robot controller.</p> <p>Parameters:</p> Name Type Description Default <code>io_name</code> <code>str</code> <p>The name/identifier of the group input to read.</p> required Side Effects <p>Prints the current value of the specified group input to the console.</p>"},{"location":"api/reference/dcs/robot/ros_client/#dcs.robot.ros_client.DcsRosClient.get_robotarget","title":"<code>get_robotarget()</code>","text":"<p>Get the current robot target position and external axes.</p> <p>Returns:</p> Name Type Description <code>tuple</code> <code>tuple</code> <p>A tuple containing (frame, external_axes) representing the current    robot position, or (None, None) if the request fails.</p>"},{"location":"api/reference/dcs/robot/ros_client/#dcs.robot.ros_client.DcsRosClient.get_workobject","title":"<code>get_workobject()</code>","text":"<p>Get the currently active work object.</p> <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>This method is not yet implemented.</p>"},{"location":"api/reference/dcs/robot/ros_client/#dcs.robot.ros_client.DcsRosClient.init_ros_client","title":"<code>init_ros_client()</code>","text":"<p>Initialize the ROS client and establish connection to ABB robot.</p> <p>Creates and starts the ROS client connection, then initializes the ABB client with the robot namespace '/rob1'. Sends a welcome message to confirm connection.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If ROS connection fails or ABB client initialization fails.</p>"},{"location":"api/reference/dcs/robot/ros_client/#dcs.robot.ros_client.DcsRosClient.move_to_frame","title":"<code>move_to_frame(frame, speed, zone)</code>","text":"<p>Move the robot to a specified frame using linear motion.</p> <p>Parameters:</p> Name Type Description Default <code>frame</code> <p>The target frame/pose for the robot to move to.</p> required <code>speed</code> <code>int</code> <p>Movement speed parameter.</p> required <code>zone</code> <code>int</code> <p>Zone parameter controlling path precision vs speed.</p> required Side Effects <p>Sends movement command to robot and prints movement status.</p>"},{"location":"api/reference/dcs/robot/ros_client/#dcs.robot.ros_client.DcsRosClient.move_to_joints","title":"<code>move_to_joints(joints, external_axes, speed, zone)</code>","text":"<p>Move the robot to specified joint positions.</p> <p>Parameters:</p> Name Type Description Default <code>joints</code> <code>list</code> <p>List of joint angles for robot axes.</p> required <code>external_axes</code> <p>External axis positions (if applicable).</p> required <code>speed</code> <code>int</code> <p>Movement speed parameter.</p> required <code>zone</code> <code>int</code> <p>Zone parameter controlling path precision vs speed.</p> required Side Effects <p>Sends joint movement command to robot and prints movement status.</p>"},{"location":"api/reference/dcs/robot/ros_client/#dcs.robot.ros_client.DcsRosClient.move_to_robotarget","title":"<code>move_to_robotarget()</code>","text":"<p>Move the robot to a robot target position.</p> <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>This method is not yet implemented.</p>"},{"location":"api/reference/dcs/robot/ros_client/#dcs.robot.ros_client.DcsRosClient.print_text","title":"<code>print_text(text)</code>","text":"<p>Send text to be printed on the robot controller and console.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text message to print.</p> required Side Effects <p>Sends print command to robot controller and prints to local console.</p>"},{"location":"api/reference/dcs/robot/ros_client/#dcs.robot.ros_client.DcsRosClient.set_acceleration","title":"<code>set_acceleration(acc, ramp)</code>","text":"<p>Set the robot's acceleration parameters.</p> <p>Parameters:</p> Name Type Description Default <code>acc</code> <code>int</code> <p>Acceleration value as percentage (%).</p> required <code>ramp</code> <code>int</code> <p>Ramp value as percentage (%).</p> required"},{"location":"api/reference/dcs/robot/ros_client/#dcs.robot.ros_client.DcsRosClient.set_digital_output","title":"<code>set_digital_output(io_name, value)</code>","text":"<p>Set the value of a digital output on the robot controller.</p> <p>Parameters:</p> Name Type Description Default <code>io_name</code> <code>str</code> <p>The name/identifier of the digital output signal.</p> required <code>value</code> <code>int</code> <p>The value to set (typically 0 or 1 for digital signals).</p> required"},{"location":"api/reference/dcs/robot/ros_client/#dcs.robot.ros_client.DcsRosClient.set_group_output","title":"<code>set_group_output(io_name, value)</code>","text":"<p>Set the value of a group output on the robot controller.</p> <p>Group outputs allow setting multiple digital signals simultaneously.</p> <p>Parameters:</p> Name Type Description Default <code>io_name</code> <code>str</code> <p>The name/identifier of the group output.</p> required <code>value</code> <code>int</code> <p>The integer value representing the group state.</p> required"},{"location":"api/reference/dcs/robot/ros_client/#dcs.robot.ros_client.DcsRosClient.set_max_speed","title":"<code>set_max_speed(overide, max_tcp)</code>","text":"<p>Set the robot's maximum speed parameters.</p> <p>Parameters:</p> Name Type Description Default <code>overide</code> <code>int</code> <p>Speed override value as percentage (%).</p> required <code>max_tcp</code> <code>int</code> <p>Maximum TCP (Tool Center Point) speed in mm/s.</p> required"},{"location":"api/reference/dcs/robot/ros_client/#dcs.robot.ros_client.DcsRosClient.set_move_zone","title":"<code>set_move_zone(zone)</code>","text":"<p>Set the movement zone parameter for robot motions.</p> <p>Parameters:</p> Name Type Description Default <code>zone</code> <code>int</code> <p>Zone parameter value.</p> required <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>This method is not yet implemented.</p>"},{"location":"api/reference/dcs/robot/ros_client/#dcs.robot.ros_client.DcsRosClient.set_tool","title":"<code>set_tool(tool_name)</code>","text":"<p>Set the active tool for the robot.</p> <p>Parameters:</p> Name Type Description Default <code>tool_name</code> <code>str</code> <p>Name of the tool to activate.</p> required Side Effects <p>Prints confirmation of tool change.</p>"},{"location":"api/reference/dcs/robot/ros_client/#dcs.robot.ros_client.DcsRosClient.set_workobject","title":"<code>set_workobject(workobject)</code>","text":"<p>Set the active work object coordinate system for the robot.</p> <p>Parameters:</p> Name Type Description Default <code>workobject</code> <code>str</code> <p>Name of the work object to activate.</p> required Side Effects <p>Prints confirmation of work object change.</p>"},{"location":"api/reference/dcs/robot/ros_client/#dcs.robot.ros_client.DcsRosClient.wait","title":"<code>wait(time)</code>","text":"<p>Make the robot wait for a specified duration.</p> <p>Parameters:</p> Name Type Description Default <code>time</code> <code>int</code> <p>Wait time duration (units depend on robot controller settings).</p> required"},{"location":"api/reference/dcs/utils/data_processing/","title":"dcs.utils.data_processing","text":""},{"location":"api/reference/dcs/utils/data_processing/#dcs.utils.data_processing.DataProcessing","title":"<code>DataProcessing</code>","text":"<p>This is a class that provides the data collection, processing, handlering.</p>"},{"location":"api/reference/dcs/utils/data_processing/#dcs.utils.data_processing.DataProcessing.__init__","title":"<code>__init__(filename=str, data=dict)</code>","text":"<p>Initialize the class with the filename and data.</p>"},{"location":"api/reference/dcs/utils/data_processing/#dcs.utils.data_processing.DataProcessing.__is_file_existed","title":"<code>__is_file_existed(filepath=str)</code>","text":"<p>check the file is aready in the folder.</p>"},{"location":"api/reference/dcs/utils/data_processing/#dcs.utils.data_processing.DataProcessing.update_data","title":"<code>update_data(new_data)</code>","text":""},{"location":"api/reference/dcs/utils/data_processing/#dcs.utils.data_processing.DataProcessing.write_dict_to_csv","title":"<code>write_dict_to_csv(header)</code>","text":""},{"location":"api/reference/dcs/utils/data_processing/#dcs.utils.data_processing.DataProcessing.write_dict_to_json","title":"<code>write_dict_to_json()</code>","text":"<p>write python dictionary to json format profile.</p>"}]}